========================================================================= 
Log Path: log_file.log 
Working Directory: /mnt/STORE1/bighome/samuelgamboa/Projects/bugphyzzExports 
User Name: samuelgamboa 
R Version: 4.3.2 (2023-10-31) 
Machine: supermicro x86_64 
Operating System: Linux 5.4.0-150-generic #167-Ubuntu SMP Mon May 15 17:35:05 UTC 2023 
Base Packages: stats graphics grDevices utils datasets methods base Other Packages: purrr_1.0.2 castor_1.8.0 Rcpp_1.0.12 phytools_2.1-1 maps_3.4.2 ape_5.7-1 tibble_3.2.1 tidyr_1.3.0 bugphyzzExports_0.0.0.9004 dplyr_1.1.4 rlang_1.1.3 taxPPro_0.1.0 bugphyzz_0.0.1.4 logr_1.3.5 
Log Start Time: 2024-01-16 17:31:08.966206 
========================================================================= 
Importing 29 physiologies from bugphyzz: "growth temperature, coding genes, genome size, length, width, optimal ph, mutation rate per site per generation, mutation rate per site per year, animal pathogen, antimicrobial sensitivity, biofilm forming, extreme environment, health associated, hydrogen gas producing, lactate producing, motility, plant pathogenicity, spore formation, host-associated, sphingolipid producing, butyrate producing, aerophilicity, gram stain, biosafety level, COGEM pathogenicity rating, shape, spore shape, arrangement, hemolysis" -- 2024-01-16 17:31:09.284112 

Propagating aerophilicity of type multistate-intersection. 
   user  system elapsed 
259.064   0.468 259.506 
Propagating animal pathogen of type binary. 
   user  system elapsed 
464.132   0.528 464.611 
Propagating antimicrobial sensitivity of type binary. 
   user  system elapsed 
424.686   0.484 425.129 
Propagating arrangement of type multistate-intersection. 
   user  system elapsed 
467.565   0.604 468.125 
Propagating biofilm forming of type binary. 
Not enough data for ASR for biofilm forming. Skipping ASR. 
Propagating biosafety level of type multistate-intersection. 
   user  system elapsed 
355.709   0.444 356.119 
Propagating butyrate producing of type binary. 
Not enough data for ASR for butyrate producing. Skipping ASR. 
Propagating coding genes of type range. 
   user  system elapsed 
  0.088   0.000   0.087 
Propagating COGEM pathogenicity rating of type multistate-intersection. 
   user  system elapsed 
307.869   0.364 308.213 
Propagating extreme environment of type binary. 
   user  system elapsed 
389.723   0.464 390.160 
Propagating genome size of type range. 
   user  system elapsed 
  0.085   0.000   0.086 
Propagating gram stain of type multistate-intersection. 
   user  system elapsed 
325.085   0.400 325.455 
Propagating growth temperature of type range. 
   user  system elapsed 
  0.082   0.004   0.086 
Propagating health associated of type binary. 
Not enough data for ASR for health associated. Skipping ASR. 
Propagating hemolysis of type multistate-intersection. 
   user  system elapsed 
424.004   0.500 424.468 
Propagating host-associated of type binary. 
   user  system elapsed 
495.436   0.612 496.011 
Propagating hydrogen gas producing of type binary. 
Not enough data for ASR for hydrogen gas producing. Skipping ASR. 
Propagating lactate producing of type binary. 
Not enough data for ASR for lactate producing. Skipping ASR. 
Propagating length of type range. 
   user  system elapsed 
  0.084   0.000   0.084 
Propagating motility of type binary. 
   user  system elapsed 
482.585   1.144 483.687 
Propagating mutation rate per site per generation of type range. 
Not enough data for ASR for mutation rate per site per generation. Skipping ASR. 
Propagating mutation rate per site per year of type range. 
Not enough data for ASR for mutation rate per site per year. Skipping ASR. 
Propagating optimal ph of type range. 
   user  system elapsed 
  0.084   0.000   0.084 
Propagating plant pathogenicity of type binary. 
   user  system elapsed 
413.479   0.472 413.909 
Propagating shape of type multistate-intersection. 
   user  system elapsed 
593.890   0.768 594.602 
Propagating sphingolipid producing of type binary. 
Not enough data for ASR for sphingolipid producing. Skipping ASR. 
Propagating spore formation of type binary. 
   user  system elapsed 
285.203   0.836 286.010 
Propagating spore shape of type multistate-intersection. 
   user  system elapsed 
334.335   0.504 334.806 
Propagating width of type range. 
   user  system elapsed 
  0.087   0.000   0.087 
Writing GMT files... 
rank: genus / tax_id_type: Taxon_name / physiology: aerophilicity 

Error in dplyr::mutate(dat, Attribute = paste0("bugphyzz:", .data$Attribute_group, :  [1mCaused by error in `.data$Attribute_group`:[22m [1m[22m[33m![39m Column `Attribute_group` not found in `.data`. Calls: makeSignatures ... signalCondition -> <Anonymous> -> abort -> signal_abort 
Traceback: 
 [1] "25: stop(fallback)"                                                                                                   
 [2] "24: signal_abort(cnd, .file)"                                                                                         
 [3] "23: abort(message, class = error_class, parent = parent, call = error_call)"                                          
 [4] "22: (function (cnd) "                                                                                                 
 [5] "    {"                                                                                                                
 [6] "        local_error_context(dots, i = frame[[i_sym]], mask = mask)"                                                   
 [7] "        if (inherits(cnd, \"dplyr:::internal_error\")) {"                                                             
 [8] "            parent <- error_cnd(message = bullets(cnd))"                                                              
 [9] "        }"                                                                                                            
[10] "        else {"                                                                                                       
[11] "            parent <- cnd"                                                                                            
[12] "        }"                                                                                                            
[13] "        message <- c(cnd_bullet_header(action), i = if (has_active_group_context(mask)) cnd_bullet_cur_group_label())"
[14] "        abort(message, class = error_class, parent = parent, call = error_call)"                                      
[15] "    })(list(message = \"Column `Attribute_group` not found in `.data`.\", "                                           
[16] "        trace = list(call = list(makeSignatures(dat = all_data_list[[k]], "                                           
[17] "            tax_id_type = tax_id_types[j], tax_level = ranks[i]), "                                                   
[18] "            .makeSignaturesDiscrete(dat = dat, tax_id_type = tax_id_type), "                                          
[19] "            lapply({"                                                                                                 
[20] "                function(y) split(y, y$Attribute)"                                                                    
[21] "            }(dplyr::mutate(dat, Attribute = paste0(\"bugphyzz:\", "                                                  
[22] "                .data$Attribute_group, \"|\", .data$Attribute, \"|\", "                                               
[23] "                .data$Attribute_value))), function(x) unique(x[[tax_id_type]])), "                                    
[24] "            {"                                                                                                        
[25] "                function(y) split(y, y$Attribute)"                                                                    
[26] "            }(dplyr::mutate(dat, Attribute = paste0(\"bugphyzz:\", "                                                  
[27] "                .data$Attribute_group, \"|\", .data$Attribute, \"|\", "                                               
[28] "                .data$Attribute_value))), split(y, y$Attribute), "                                                    
[29] "            dplyr::mutate(dat, Attribute = paste0(\"bugphyzz:\", .data$Attribute_group, "                             
[30] "                \"|\", .data$Attribute, \"|\", .data$Attribute_value)), "                                             
[31] "            mutate.data.frame(dat, Attribute = paste0(\"bugphyzz:\", "                                                
[32] "                .data$Attribute_group, \"|\", .data$Attribute, \"|\", "                                               
[33] "                .data$Attribute_value)), mutate_cols(.data, dplyr_quosures(...), "                                    
[34] "                by), withCallingHandlers(for (i in seq_along(dots)) {"                                                
[35] "                poke_error_context(dots, i, mask = mask)"                                                             
[36] "                context_poke(\"column\", old_current_column)"                                                         
[37] "                new_columns <- mutate_col(dots[[i]], data, mask, "                                                    
[38] "                    new_columns)"                                                                                     
[39] "            }, error = dplyr_error_handler(dots = dots, mask = mask, "                                                
[40] "                bullets = mutate_bullets, error_call = error_call, "                                                  
[41] "                error_class = \"dplyr:::mutate_error\"), warning = dplyr_warning_handler(state = warnings_state, "    
[42] "                mask = mask, error_call = error_call)), mutate_col(dots[[i]], "                                       
[43] "                data, mask, new_columns), mask$eval_all_mutate(quo), "                                                
[44] "            eval(), paste0(\"bugphyzz:\", .data$Attribute_group, \"|\", "                                             
[45] "                .data$Attribute, \"|\", .data$Attribute_value), .data$Attribute_group, "                              
[46] "            `$.rlang_data_pronoun`(.data, Attribute_group), data_pronoun_get(x, "                                     
[47] "                nm, call = I(call(\"$\", quote(.data), sym(nm)))), "                                                  
[48] "            abort_data_pronoun(x, call = y), abort(msg, \"rlang_error_data_pronoun_not_found\", "                     
[49] "                call = call)), parent = c(0L, 1L, 2L, 2L, 4L, 2L, "                                                   
[50] "        2L, 7L, 8L, 8L, 10L, 11L, 0L, 0L, 0L, 15L, 0L, 17L), visible = c(TRUE, "                                      
[51] "        TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, "                                                 
[52] "        TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, FALSE), namespace = c(\"bugphyzz\", "                                     
[53] "        \"bugphyzz\", \"base\", NA, \"base\", \"dplyr\", \"dplyr\", \"dplyr\", "                                      
[54] "        \"base\", \"dplyr\", NA, \"dplyr\", \"base\", NA, \"rlang\", \"rlang\", "                                     
[55] "        \"rlang\", \"rlang\"), scope = c(\"::\", \":::\", \"::\", NA, \"::\", "                                       
[56] "        \"::\", \":::\", \":::\", \"::\", \":::\", NA, \"local\", \"::\", NA, \":::\", "                              
[57] "        \":::\", \":::\", \"::\")), parent = NULL, rlang = list(inherit = TRUE), "                                    
[58] "        call = .data$Attribute_group, use_cli_format = TRUE))"                                                        
[59] "21: signalCondition(cnd)"                                                                                             
[60] "20: signal_abort(cnd, .file)"                                                                                         
[61] "19: abort(msg, \"rlang_error_data_pronoun_not_found\", call = call)"                                                  
[62] "18: abort_data_pronoun(x, call = y)"                                                                                  
[63] "17: data_pronoun_get(x, nm, call = I(call(\"$\", quote(.data), sym(nm))))"                                            
[64] "16: `$.rlang_data_pronoun`(.data, Attribute_group)"                                                                   
[65] "15: .data$Attribute_group"                                                                                            
[66] "14: paste0(\"bugphyzz:\", .data$Attribute_group, \"|\", .data$Attribute, "                                            
[67] "        \"|\", .data$Attribute_value)"                                                                                
[68] "13: .Call(dplyr_mask_eval_all_mutate, quo, private)"                                                                  
[69] "12: eval()"                                                                                                           
[70] "11: mask$eval_all_mutate(quo)"                                                                                        
[71] "10: mutate_col(dots[[i]], data, mask, new_columns)"                                                                   
[72] "9: withCallingHandlers(for (i in seq_along(dots)) {"                                                                  
[73] "       poke_error_context(dots, i, mask = mask)"                                                                      
[74] "       context_poke(\"column\", old_current_column)"                                                                  
[75] "       new_columns <- mutate_col(dots[[i]], data, mask, new_columns)"                                                 
[76] "   }, error = dplyr_error_handler(dots = dots, mask = mask, bullets = mutate_bullets, "                               
[77] "       error_call = error_call, error_class = \"dplyr:::mutate_error\"), "                                            
[78] "       warning = dplyr_warning_handler(state = warnings_state, mask = mask, "                                         
[79] "           error_call = error_call))"                                                                                 
[80] "8: mutate_cols(.data, dplyr_quosures(...), by)"                                                                       
[81] "7: mutate.data.frame(dat, Attribute = paste0(\"bugphyzz:\", .data$Attribute_group, "                                  
[82] "       \"|\", .data$Attribute, \"|\", .data$Attribute_value))"                                                        
[83] "6: dplyr::mutate(dat, Attribute = paste0(\"bugphyzz:\", .data$Attribute_group, "                                      
[84] "       \"|\", .data$Attribute, \"|\", .data$Attribute_value))"                                                        
[85] "5: split(y, y$Attribute)"                                                                                             
[86] "4: {"                                                                                                                 
[87] "       function(y) split(y, y$Attribute)"                                                                             
[88] "   }(dplyr::mutate(dat, Attribute = paste0(\"bugphyzz:\", .data$Attribute_group, "                                    
[89] "       \"|\", .data$Attribute, \"|\", .data$Attribute_value)))"                                                       
[90] "3: lapply({"                                                                                                          
[91] "       function(y) split(y, y$Attribute)"                                                                             
[92] "   }(dplyr::mutate(dat, Attribute = paste0(\"bugphyzz:\", .data$Attribute_group, "                                    
[93] "       \"|\", .data$Attribute, \"|\", .data$Attribute_value))), function(x) unique(x[[tax_id_type]]))"                
[94] "2: .makeSignaturesDiscrete(dat = dat, tax_id_type = tax_id_type)"                                                     
[95] "1: makeSignatures(dat = all_data_list[[k]], tax_id_type = tax_id_types[j], "                                          
[96] "       tax_level = ranks[i])"                                                                                         
Warning message:
In write.table(x = numeric_data, file = "bugphyzz_numeric.csv",  ... :
  appending column names to file
========================================================================= 
Log End Time: 2024-01-16 19:14:37.497816 
Log Elapsed Time: 0 01:43:28 
========================================================================= 
