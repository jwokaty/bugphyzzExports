========================================================================= 
Log Path: log_file.log 
Program Path: /home/samuel/Projects/CUNY/bugphyzz/bugphyzzExports/inst/scripts/export_bugphyzz.R 
Working Directory: /home/samuel/Projects/CUNY/bugphyzz/bugphyzzExports 
User Name: samuel 
R Version: 4.3.0 (2023-04-21) 
Machine: pop-os x86_64 
Operating System: Linux 6.2.6-76060206-generic #202303130630~1689015125~22.04~ab2190e SMP PREEMPT_DYNAMIC Mon J 
Base Packages: stats graphics grDevices utils datasets methods base Other Packages: tidyr_1.3.0 BiocParallel_1.34.2 bugphyzzExports_0.0.0.9000 data.tree_1.0.0 dplyr_1.1.2 rlang_1.1.1 purrr_1.0.1 taxPPro_0.1.0 bugphyzz_0.0.1.3 logr_1.3.4 
Log Start Time: 2023-07-13 15:38:05.574082 
========================================================================= 
Importing 34 physiologies from bugphyzz: "acetate producing, aerophilicity, animal pathogen, antimicrobial resistance, antimicrobial sensitivity, arrangement, biofilm forming, biosafety level, butyrate producing, coding genes, COGEM pathogenicity rating, disease association, extreme environment, genome size, gram stain, growth medium, growth temperature, halophily, health associated, hemolysis, hydrogen gas producing, lactate producing, length, motility, mutation rate per site per generation, mutation rates per site per year, optimal ph, pathogenicity human, plant pathogenicity, shape, sphingolipid producing, spore formation, spore shape, width" -- 2023-07-13 15:38:05.579159 

Check that all attributes are valid. Invalid values will be printed: 

Invalid values for aerophilicity: 
# A tibble: 3 × 2
  Attribute_group Attribute         
  <chr>           <chr>             
1 aerophilicity   facultative aerobe
2 aerophilicity   microaerotolerant 
3 aerophilicity   positive          

Invalid values for biosafety level: 
# A tibble: 6 × 2
  Attribute_group Attribute                                           
  <chr>           <chr>                                               
1 biosafety level "biosafety level Risk group (German classification)"
2 biosafety level "biosafety level 11o58'14.4\\\""                    
3 biosafety level "biosafety level Germany"                           
4 biosafety level "biosafety level 1+"                                
5 biosafety level "biosafety level 3**"                               
6 biosafety level "biosafety level L1"                                

Invalid values for COGEM pathogenicity rating: 
# A tibble: 3 × 2
  Attribute_group            Attribute                   
  <chr>                      <chr>                       
1 COGEM pathogenicity rating COGEM pathogenicity rating 1
2 COGEM pathogenicity rating COGEM pathogenicity rating 2
3 COGEM pathogenicity rating COGEM pathogenicity rating 3

Invalid values for disease association: 
# A tibble: 4 × 2
  Attribute_group     Attribute               
  <chr>               <chr>                   
1 disease association endocarditis, septicemia
2 disease association meningitis, septicemia  
3 disease association septicemia , Arthritis  
4 disease association urlnary tract infection 

Invalid values for growth medium: 
# A tibble: 2,191 × 2
   Attribute_group Attribute                                                                           
   <chr>           <chr>                                                                               
 1 growth medium   NUTRIENT AGAR (DSMZ Medium 1)                                                       
 2 growth medium   Marine agar (MA)                                                                    
 3 growth medium   R2A MEDIUM (DSMZ Medium 830)                                                        
 4 growth medium   ACETIVIBRIO MEDIUM (DSMZ Medium 122)                                                
 5 growth medium   Zobell marine agar (ZMA)                                                            
 6 growth medium   MEDIUM 1 - for Acetobacter, Azotobacter, Gluconobacter, Gluconacetobacter, Mesorhiz…
 7 growth medium   MEDIUM 85 - for Abiotrophia                                                         
 8 growth medium   GS2 agar plates                                                                     
 9 growth medium   TRYPTICASE SOY YEAST EXTRACT MEDIUM (DSMZ Medium 92)                                
10 growth medium   MLO agar                                                                            
# ℹ 2,181 more rows
# ℹ Use `print(n = ...)` to see more rows

Invalid values for shape: 
# A tibble: 20 × 2
   Attribute_group Attribute         
   <chr>           <chr>             
 1 shape           square            
 2 shape           vibriod cell      
 3 shape           rod-shaped        
 4 shape           coccus-shaped     
 5 shape           filament-shaped   
 6 shape           ellipsoidal       
 7 shape           pleomorphic-shaped
 8 shape           ovoid-shaped      
 9 shape           oval-shaped       
10 shape           other             
11 shape           sphere-shaped     
12 shape           spiral-shaped     
13 shape           curved-shaped     
14 shape           helical-shaped    
15 shape           vibrio-shaped     
16 shape           ring-shaped       
17 shape           spore-shaped      
18 shape           crescent-shaped   
19 shape           star-shaped       
20 shape           diplococcus-shaped

Error in deparse(Exp[[i]]) != "" && is.call(curExp) : 'length = 5' in coercion to 'logical(1)' 
Traceback: 
 [1] "10: simplifyElementOp(curExp, useElementOp = FALSE, isTop = TRUE)"                                                                
 [2] "9: parserFunc(curLevel, codeMetaInfo, Exp)"                                                                                       
 [3] "8: ProcessCodeSingle(parserFunc, updateFunc, codePack$codeMetaInfo, "                                                             
 [4] "       curLevel, codePack$previousExp, codePack$processedExp, codePack$i, "                                                       
 [5] "       sub_Exp)"                                                                                                                  
 [6] "7: processCodePack(parserFunc, checkFunc, updateFunc, curLevel, "                                                                 
 [7] "       codePack, 0)"                                                                                                              
 [8] "6: parserFrame_hidden(parserFunc, checkFunc, updateFunc, codeMetaInfo)"                                                           
 [9] "5: parserFrame(RLevel1_parserFunc, RLevel1_checkFunc, RLevel1_updateFunc, "                                                       
[10] "       codeMetaInfo)"                                                                                                             
[11] "4: RParser1(codeMetaInfo0)"                                                                                                       
[12] "3: .compileGPUCode(FUN, parms, .macroParms = .macroParms, .options = .options)"                                                   
[13] "2: gpuSapply_singleDev(X, FUN, ..., .macroParms = .macroParms, .device = .device, "                                               
[14] "       .options = .options)"                                                                                                      
[15] "1: gpuSapply(X = data_ready, FUN = function(x) {"                                                                                 
[16] "       msg <- unique(x$Attribute_group)"                                                                                          
[17] "       msg <- paste0(\"Propagating \", msg, \"...\")"                                                                             
[18] "       log_print(msg)"                                                                                                            
[19] "       input_tbl <- complete(distinct(select(x, NCBI_ID, Attribute, "                                                             
[20] "           Score, Evidence)), NCBI_ID, Attribute, fill = list(Score = 0, "                                                        
[21] "           Evidence = \"\"))"                                                                                                     
[22] "       l <- split(input_tbl, factor(input_tbl$NCBI_ID))"                                                                          
[23] "       tree$Do(function(node) {"                                                                                                  
[24] "           if (!is.null(l[[node$name]])) {"                                                                                       
[25] "               node[[\"table\"]] <- l[[node$name]]"                                                                               
[26] "           }"                                                                                                                     
[27] "       })"                                                                                                                        
[28] "       tree$Do(asr, traversal = \"post-order\")"                                                                                  
[29] "       tree$Do(inh, traversal = \"pre-order\")"                                                                                   
[30] "       data_tree_tbl <- dplyr::filter(dplyr::relocate(dplyr::bind_rows(purrr::discard(tree$Get(function(node) node[[\"table\"]], "
[31] "           simplify = FALSE), ~all(is.na(.x)))), NCBI_ID), Evidence %in% "                                                        
[32] "           c(\"\", \"asr\", \"inh\") | is.na(Evidence))"                                                                          
[33] "       data_with_values <- bind_rows(data_tree_tbl, x)"                                                                           
[34] "       all_node_names <- tree$Get(function(node) node$name, simplify = TRUE)"                                                     
[35] "     ..."                                                                                                                         
Warning messages:
1: Missing columns in biosafety level. Missing columns are: Accession_ID
2: Missing columns in halophily. Missing columns are: Accession_ID
3: Missing columns in hemolysis. Missing columns are: Accession_ID
4: Missing columns in motility. Missing columns are: Accession_ID
5: Missing columns in pathogenicity human. Missing columns are: Accession_ID
6: Missing columns in spore formation. Missing columns are: Accession_ID
========================================================================= 
Log End Time: 2023-07-13 15:42:23.616448 
Log Elapsed Time: 0 00:04:18 
========================================================================= 
